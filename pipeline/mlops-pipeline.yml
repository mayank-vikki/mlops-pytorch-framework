AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Description: "Create an AWS CodePipeline to Operationalize a PyTorch Machine Learning Model."

Parameters:

  ImageRepoName:
    Type: String
    Description: "Name of the ECR repo without the image name."
    Default: abalone-pytorch

  ImageTagName:
    Type: String
    Description: "Name of the ECR image tag."
    Default: latest

  ModelName:
    Type: String
    Description: "Name of the model."
    Default: abalone-pytorch

  RoleName:
    Type: String
    Description: "Name of the Pipeline execution Role."
    Default: MLOps-pytorch
    
  CodeCommitRepoName:
    Type: String
    Description: "Name of the CodeCommit Repository for Storage of code & artifacts."
    Default: mlops-pytorch
    
  TargetColumn:
    Type: String
    Description: 'Target Column of the data'
    Default: 'rings'

Resources:

  CreateModelGroup:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub create-model-group-${ModelName}
      Description: "Function to create a SageMaker Model Package Group."
      Handler: lambda.handler
      MemorySize: 128
      Role: !GetAtt MLOpsRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          MODEL_NAME: !Ref ModelName
      CodeUri: ModelGroup/
      Tags:
        Name: !Sub create-model-group-${ModelName}

  PackageGroup:
    Type: Custom::PackageGroup
    Properties:
      ServiceToken: !GetAtt CreateModelGroup.Arn

  TrainingLaunchJob:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub training-launch-job-${ModelName}
      Description: "Function to start a new Sagemaker Training Job."
      Handler: lambda.handler
      MemorySize: 128
      Role: !GetAtt MLOpsRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          PIPELINE_NAME: !Sub ${AWS::StackName}
          PIPELINE_BUCKET: !Sub mlops-pytorch-${AWS::Region}-${AWS::AccountId} #mlops-pytorch-us-west-2-123456789012
          MODEL_NAME: !Ref ModelName
      CodeUri: TrainingLaunchJob/
      Tags:
        Name: !Sub training-launch-job-${ModelName}
  
  EtlLaunchJob:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub etl-launch-job-${ModelName}
      Description: "Function that will start a new Glue ETL Job."
      Handler: lambda.handler
      MemorySize: 128
      Role: !GetAtt MLOpsRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          PIPELINE_NAME: !Sub ${AWS::StackName}
          MODEL_NAME: !Ref ModelName
          ROLE_NAME: !Ref RoleName
      CodeUri: EtlLaunchJob/
      Tags:
        Name: !Sub etl-launch-job-${ModelName}
  
  TrainingJobMonitor:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub training-job-monitor-${ModelName}
      Description: "Function that will monitor that status of the SageMaker Training Job."
      Handler: lambda.handler
      MemorySize: 512
      Role: !GetAtt MLOpsRole.Arn
      Runtime: python3.8
      Timeout: 60
      CodeUri: TrainingJobMonitor/
      Environment:
        Variables:
          PIPELINE_NAME: !Sub ${AWS::StackName}
          MODEL_NAME: !Ref ModelName
      Tags:
        Name: !Sub training-job-monitor-${ModelName}
  
  EtlJobMonitor:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub etl-job-monitor-${ModelName}
      Description: "Function that will monitor that status of the Glue ETL Job."
      Handler: lambda.handler
      MemorySize: 512
      Role: !GetAtt MLOpsRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          PIPELINE_NAME: !Sub ${AWS::StackName}
          MODEL_NAME: !Ref ModelName
      CodeUri: EtlJobMonitor/
      Tags:
        Name: !Sub etl-job-monitor-${ModelName}
  
  TrainingJobMonitorPermissions:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Sub training-job-monitor-${ModelName}
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TrainingJobMonitoringEvent.Arn
    DependsOn: TrainingJobMonitor
  
  EtlJobMonitorPermissions:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Sub etl-job-monitor-${ModelName}
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EtlJobMonitoringEvent.Arn
    DependsOn: EtlJobMonitor
  
  TrainingJobMonitoringEvent:
    Type: AWS::Events::Rule
    Properties: 
      Description: "Event that will monitor the training job and inform codepipeline as it finishes."
      Name: !Sub training-job-monitor-${ModelName}
      ScheduleExpression: cron(0/1 * * * ? *)
      State: DISABLED
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:training-job-monitor-${ModelName}
          Id: !Sub training-event-${ModelName}
    DependsOn: TrainingJobMonitor
  
  EtlJobMonitoringEvent:
    Type: AWS::Events::Rule
    Properties: 
      Description: "Event that will monitor the gluejob and inform codepipeline as it finishes."
      Name: !Sub etl-job-monitor-${ModelName}
      ScheduleExpression: cron(0/1 * * * ? *)
      State: DISABLED
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:etl-job-monitor-${ModelName}
          Id: !Sub etl-event-${ModelName}
    DependsOn: EtlJobMonitor
  
  BuildImageProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub mlops-buildimage-${ModelName}
      Description: "Build the Model Training and Inference Image."
      ServiceRole: !GetAtt MLOpsRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          Version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.8
            pre_build:
              commands:
                - printenv
                - echo Updating Packages ...
                - pip install --upgrade pip
            build:
              Commands:
                - echo Build started on `date`
                - echo Logging in to the Amazon Deep Learning Contain Repository ...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin 763104351884.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - echo Building the Container image...
                - docker build --build-arg REGION=$AWS_DEFAULT_REGION -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            post_build:
              commands:
                - echo Logging in to ECR Repository...
                - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
                - echo Pushing the Container image...
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
              finally:
                - echo Build completed on `date`
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: IMAGE_REPO_NAME
            Value: !Ref ImageRepoName
          - Name: IMAGE_TAG
            Value: !Ref ImageTagName
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
          - Name: AWS_DEFAULT_REGION
            Value: !Sub ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub mlops-buildimage-${ModelName}

  BuildDeploymentProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub mlops-build-deployment-${ModelName}
      Description: "Builds the required resource properties for the deployment."
      ServiceRole: !GetAtt MLOpsRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL 
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: PIPELINE_NAME
            Value: !Sub ${AWS::StackName}
          - Name: IMAGE_REPO_NAME
            Value: !Ref ImageRepoName
          - Name: MODEL_NAME
            Value: !Ref ModelName
          - Name: IMAGE_TAG
            Value: !Ref ImageTagName
          - Name: MODEL_GROUP
            Value: !GetAtt PackageGroup.Name
      Tags:
        - Key: Name
          Value: !Sub mlops-build-deployment-${ModelName}
  
  BuildWorkflowProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub mlops-buildworkflow-${ModelName}
      Description: "Create Step Functions Workflow for System Test."
      ServiceRole: !GetAtt MLOpsRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: IMAGE_REPO_NAME
            Value: !Ref ImageRepoName
          - Name: IMAGE_TAG
            Value: !Ref ImageTagName
          - Name: MODEL_NAME
            Value: !Ref ModelName
          - Name: PIPELINE_BUCKET
            Value: !Sub mlops-pytorch-${AWS::Region}-${AWS::AccountId}
          - Name: WORKFLOW_NAME
            Value: !Sub ${AWS::StackName}-systemtest
          - Name: PIPELINE_NAME
            Value: !Sub ${AWS::StackName}
          - Name: MODEL_GROUP
            Value: !GetAtt PackageGroup.Name
          - Name: TARGET_COLUMN
            Value: !Ref TargetColumn
      Tags:
        - Key: Name
          Value: !Sub mlops-buildworkflow-${ModelName}

  MLOpsPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AWS::StackName}
      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${RoleName}
      ArtifactStore:
          Type: S3
          Location: !Sub mlops-pytorch-${AWS::Region}-${AWS::AccountId}
      Stages:
        - Name: Source
          Actions: 
            - Name: ModelSource
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts: 
                - Name: ModelSourceOutput
              Configuration:
                BranchName: master
                RepositoryName: !Ref CodeCommitRepoName
                PollForSourceChanges: true
              RunOrder: 1
            - Name: ETLSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts:
                - Name: EtlSourceOutput
              Configuration:
                BranchName: etl
                RepositoryName: !Ref CodeCommitRepoName
                PollForSourceChanges: true
              RunOrder: 1
            - Name: DataSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: S3
              OutputArtifacts:
                - Name: DataSourceOutput
              Configuration:
                S3Bucket: !Sub data-pytorch-${AWS::Region}-${AWS::AccountId}
                S3ObjectKey: !Sub input/raw/abalone_pytorch.csv
                PollForSourceChanges: true
              RunOrder: 1
            - Name: TestSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts:
                - Name: TestSourceOutput
              Configuration:
                BranchName: test
                RepositoryName: !Ref CodeCommitRepoName
                PollForSourceChanges: true
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildImage
              InputArtifacts:
                - Name: ModelSourceOutput
              OutputArtifacts:
                - Name: BuildImageOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildImageProject
              RunOrder: 1
        - Name: ETL
          Actions:
            - Name: GlueJob
              InputArtifacts:
                - Name: EtlSourceOutput
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: "1"
                Provider: Lambda
              Configuration:
                FunctionName: !Ref EtlLaunchJob
              RunOrder: 1
        - Name: ETLApproval
          Actions:
            - Name: ApproveETL
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: "1"
                Provider: Manual
              Configuration:
                  CustomData: 'Did the Glue ETL Job run successfully?'
              RunOrder: 1
        - Name: Train
          Actions:
            - Name: TrainModel
              InputArtifacts:
                - Name: ModelSourceOutput
              OutputArtifacts:
                - Name: ModelTrainOutput
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: "1"
                Provider: Lambda
              Configuration:
                  FunctionName: !Ref TrainingLaunchJob
                  UserParameters: !Sub mlops-pipeline-${ModelName}
              RunOrder: 1
        - Name: TrainApproval
          Actions:
            - Name: ApproveTrain
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: "1"
                Provider: Manual
              Configuration:
                  CustomData: 'Was this model trained successfully?'
              RunOrder: 1
        - Name: DeployDev
          Actions:
            - Name: BuildDevDeployment
              InputArtifacts:
                - Name: ModelSourceOutput
              OutputArtifacts:
                - Name: BuildDevOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildDeploymentProject
                EnvironmentVariables: '[{"name":"STAGE","value":"Dev","type":"PLAINTEXT"}]'
              RunOrder: 1
            - Name: DeployDevModel
              InputArtifacts:
                - Name: BuildDevOutput
              OutputArtifacts:
                - Name: DeployDevOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${RoleName}
                Capabilities: CAPABILITY_NAMED_IAM
                StackName: !Sub ${AWS::StackName}-deploy-dev
                TemplateConfiguration: BuildDevOutput::Dev-config-export.json
                TemplatePath: BuildDevOutput::deploy-model-Dev.yml
              RunOrder: 2
        - Name: SystemTest
          Actions:
            - Name: BuildTestingWorkflow
              InputArtifacts:
                - Name: TestSourceOutput
              OutputArtifacts:
                - Name: BuildTestingWorkflowOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildWorkflowProject
              RunOrder: 1
            - Name: ExecuteSystemTest
              InputArtifacts:
                - Name: BuildTestingWorkflowOutput
              OutputArtifacts:
                - Name: SystemTestingOutput
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: "1"
                Provider: StepFunctions
              Configuration:
                StateMachineArn: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-systemtest
                InputType: FilePath
                Input: input.json
              RunOrder: 2
        - Name: DeployPrd
          Actions:
            - Name: BuildPrdDeployment
              InputArtifacts:
                - Name: ModelSourceOutput
              OutputArtifacts:
                - Name: BuildPrdOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildDeploymentProject
                EnvironmentVariables: '[{"name":"STAGE","value":"Prd","type":"PLAINTEXT"}]'
              RunOrder: 1
            - Name: DeployPrdModel
              InputArtifacts:
                - Name: BuildPrdOutput
              OutputArtifacts:
                - Name: DeployPrdOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${RoleName}
                Capabilities: CAPABILITY_NAMED_IAM
                StackName: !Sub ${AWS::StackName}-deploy-prd
                TemplateConfiguration: BuildPrdOutput::Prd-config-export.json
                TemplatePath: BuildPrdOutput::deploy-model-Prd.yml
              RunOrder: 2
  MLOpsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "s3.amazonaws.com"
                - "cloudformation.amazonaws.com"
                - "events.amazonaws.com"
                - "glue.amazonaws.com"
                - "lambda.amazonaws.com"
                - "sagemaker.amazonaws.com"
                - "codebuild.amazonaws.com"
                - "codepipeline.amazonaws.com"
                - "states.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "MLOpsPolicy-Pytorch"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "LambdaAccess"
                Effect: "Allow"
                Action:
                  - "lambda:GetFunction"
                  - "lambda:CreateFunction"
                  - "lambda:DeleteFunction"
                  - "lambda:UpdateFunctionCode"
                  - "lambda:UpdateFunctionConfiguration"
                  - "lambda:InvokeFunction"
                  - "lambda:AddPermission"
                  - "lambda:RemovePermission"
                  - "lambda:GetPolicy"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-*"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ModelName}-pipeline-systemtest-*"
              - Sid: "LambdaLayerAccess"
                Effect: "Allow"
                Action:
                  - "lambda:PublishLayerVersion"
                  - "lambda:DeleteLayerVersion"
                  - "lambda:GetLayerVersion"
                  - "lambda:ListLayerVersions"
                Resource: 
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:*"
              - Sid: "SystemTestRoleCreation"
                Effect: "Allow"
                Action:
                  - "iam:CreateRole"
                  - "iam:PutRolePolicy"
                  - "iam:AttachRolePolicy"
                  - "iam:DeleteRole"
                  - "iam:DeleteRolePolicy"
                  - "iam:DetachRolePolicy"
                  - "iam:GetRole"
                  - "iam:TagRole"
                  - "iam:UntagRole"
                  - "iam:PassRole"
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-*"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-systemtest-*"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/${ModelName}-pipeline-systemtest-*"
              - Sid: "CloudFormationTagging"
                Effect: "Allow"
                Action:
                  - "cloudformation:TagResource"
                  - "cloudformation:UntagResource"
                Resource: "*"
              - Sid: "CodeCommitAccess"
                Effect: "Allow"
                Action:
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                  - "codecommit:UploadArchive"
                  - "codecommit:GetUploadArchiveStatus"
                  - "codecommit:CancelUploadArchive"
                Resource:
                  - !Sub "arn:aws:codecommit:*:*:${CodeCommitRepoName}"
              - Sid: "WorkflowRoleAdditionalAccess"
                Effect: "Allow"
                Action:
                  - "iam:GetRole"
                  - "iam:AttachRolePolicy"
                  - "iam:DetachRolePolicy"
                  - "iam:PutRolePolicy"
                  - "iam:DeleteRolePolicy"
                Resource: 
                  - !Sub "arn:aws:iam::*:role/${AWS::StackName}-systemtest-*"
              - Sid: "UploadImage"
                Effect: "Allow"
                Action: "ecr:*"
                Resource: "*"
              - Sid: "ECRAuthorizationToken"
                Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
              - Sid: "CloudWatchMetrics"
                Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricData"
                  - "cloudwatch:GetMetricData"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DeleteAlarms"
                  - "cloudwatch:DescribeAlarms"
                Resource: "*"
              - Sid: "CloudWatchLogs"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "logs:GetLogEvents"
                Resource: "*"
              - Sid: "BucketAccess"
                Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - "arn:aws:s3:::data-*"
                  - "arn:aws:s3:::data-*/*"
                  - "arn:aws:s3:::mlops-*"
                  - "arn:aws:s3:::mlops-*/*"
              - Sid: "CloudFormationAccess"
                Effect: "Allow"
                Action:
                  - "cloudformation:Create*"
                  - "cloudformation:Delete*"
                  - "cloudformation:Describe*"
                  - "cloudformation:Update*"
                  - "cloudformation:List*"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:GetTemplateSummary"
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-deploy-dev/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-deploy-prd/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-systemtest/*"
                  - "arn:aws:cloudformation:*:aws:transform/Serverless-2016-10-31"
              - Sid: "CloudWatchEventsAccess"
                Effect: "Allow"
                Action:
                  - "events:*"
                Resource: "*"
              - Sid: "CodeBuildImageAccess"
                Effect: "Allow"
                Action:
                  - "codebuild:*"
                Resource:
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/mlops-buildimage-${ModelName}"
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/mlops-${ModelName}-custom-resources"
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/mlops-buildworkflow-${ModelName}"
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/mlops-build-deployment-${ModelName}"
              - Sid: "GlueJobResourceAccess"
                Effect: "Allow"
                Action:
                  - "glue:*"
                Resource:
                  - "arn:aws:glue:*:*:job/*"
              - Sid: "LambdaResourceAccess"
                Effect: "Allow"
                Action:
                  - "lambda:*"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:training-launch-job-${ModelName}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:training-job-monitor-${ModelName}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:etl-launch-job-${ModelName}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:etl-job-monitor-${ModelName}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-systemtest-*"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-systemtest-*"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:create-model-group-${ModelName}"
              - Sid: "SageMakerFullAccess"
                Effect: "Allow"
                Action:
                  - "sagemaker:*"
                Resource: "*"
              - Sid: "MLOpsPassRole"
                Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/${RoleName}"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-systemtest-*"
              - Sid: "WorkflowRole"
                Effect: "Allow"
                Action:
                  - "iam:GetRole"
                  - "iam:GetRolePolicy"
                  - "iam:PutRolePolicy"
                  - "iam:CreateRole"
                  - "iam:DeleteRole"
                  - "iam:AttachRolePolicy"
                  - "iam:DetachRolePolicy"
                  - "iam:DeleteRolePolicy"
                Resource: '*'
              - Sid: "WorkflowSSM"
                Effect: "Allow"
                Action:
                  - "ssm:PutParameter"
                  - "ssm:DeleteParameter"
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ssm:AddTagsToResource"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
              - Sid: "StepFunctionsAccess"
                Effect: "Allow"
                Action:
                  - "states:ListStateMachines"
                  - "states:CreateStateMachine"
                  - "states:UpdateStateMachine"
                  - "states:DeleteStateMachine"
                  - "states:DescribeStateMachine"
                  - "states:StartExecution"
                  - "states:DescribeExecution"
                Resource:
                  - "arn:aws:states:*:*:stateMachine:*" 
                  - !Sub "arn:aws:states:*:*:execution:${AWS::StackName}-systemtest:*"
              - Sid: "AutoscalingServiceLinkedRole"
                Effect: "Allow"
                Action:
                  - "iam:CreateServiceLinkedRole"
                Resource:
                  - "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint"
                Condition:
                  StringLike:
                    "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
              - Sid: "CodePipelineAccess"
                Action:
                  - "codepipeline:PutJobFailureResult"
                  - "codepipeline:PutJobSuccessResult"
                  - "codepipeline:GetPipelineState"
                  - "codepipeline:PutApprovalResult"
                Effect: "Allow"
                Resource: "*"
              - Sid: "EndpointAutoScaling"
                Action:
                  - "application-autoscaling:DescribeScalableTargets"
                  - "application-autoscaling:RegisterScalableTarget"
                  - "application-autoscaling:DescribeScalableTargets"
                  - "application-autoscaling:DeregisterScalableTarget"
                  - "application-autoscaling:PutScalingPolicy"
                  - "application-autoscaling:DescribeScalingPolicies"
                  - "application-autoscaling:DescribeScalingActivities"
                  - "application-autoscaling:DeleteScalingPolicy"
                  - "application-autoscaling:DeleteScheduledAction"
                Effect: "Allow"
                Resource: "*"